- name: Validate required vars (public HTTP service)
  ansible.builtin.assert:
    that:
      - name is defined
      - image is defined
      - port is defined
      - host is defined
      - path is defined
  when: not (internal_only | default(false))
- name: Validate required vars (internal-only service)
  ansible.builtin.assert:
    that:
      - name is defined
      - image is defined
  when: internal_only | default(false)
- name: Validate config vars
  ansible.builtin.assert:
    that:
      - command is defined
    fail_msg: "'command' is required when 'service_config' is defined"
  when: service_config is defined
- name: Set config name
  ansible.builtin.set_fact:
    service_config_name: "{{ name }}_config_{{ service_config | to_nice_yaml | hash('sha1') | truncate(12, True, '') }}"
  when: service_config is defined
- name: Create docker config
  community.docker.docker_config:
    name: "{{ service_config_name }}"
    data: "{{ service_config | to_json if service_config_format == 'json' else service_config | to_nice_yaml }}"
    state: present
  when: service_config is defined
- name: Normalize environment variables map
  ansible.builtin.set_fact:
    svc_environment: "{{ environment | default(env) | default(env_vars) }}"
  when: (environment is defined) or (env is defined) or (env_vars is defined)
- name: Ensure named volumes (if defined)
  community.docker.docker_volume:
    name: "{{ item.name }}"
    state: present
  loop: "{{ volumes | default([]) }}"
  loop_control:
    label: "{{ item.name | default('volume') }}"
  when: volumes is defined and volumes | length > 0
- name: Docker registry login (if needed)
  community.docker.docker_login:
    registry_url: "{{ registry_url }}"
    username: "{{ registry_username }}"
    password: "{{ registry_password }}"
  when: registry_url is defined and registry_username is defined and registry_password is defined
- name: Render service (Swarm)
  ansible.builtin.template:
    src: service-swarm.yaml.j2
    dest: "{{ services_dir }}/{{ name }}.yaml"
    mode: "0644"
  notify: Redeploy homelab stack
- name: Render router (Traefik File Provider)
  ansible.builtin.template:
    src: route-file.yaml.j2
    dest: "{{ homelab_root }}/dynamic/routers/{{ name }}.yaml"
    mode: "0644"
  notify: Redeploy homelab stack
  when: not (internal_only | default(false))

# No force handler execution for updates - let post_tasks handle deployment
